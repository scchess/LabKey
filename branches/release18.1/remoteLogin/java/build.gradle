
String mainProjectDir = "${project.getRootDir()}/../.."

// To make this project fully stand alone, the process of grabbing the tomcat directory path is copied from
// the root build.gradle

// We need the tomcat home directory to find certain dependencies for our build process.
String tomcatDirProp = project.hasProperty('teamcity') ? teamcity['tomcat.home'] : (System.getenv('CATALINA_HOME') != null ? System.getenv('CATALINA_HOME') : System.properties['tomcat.home'])

if (tomcatDirProp == null)
    throw new GradleException("Tomcat home directory not set.  Please set the value of the system property tomcat.home " +
            "using either systemProp.tomcat.home=<tomcat home directory> in a gradle.properties file " +
            "or -Dtomcat.home=<tomcat home directory> on command line. Setting the environment variable CATALINA_HOME " +
            "will also work when building just from the command line (i.e., not in IntelliJ).")
def tomcatHome = new File(tomcatDirProp)
if (!tomcatHome.exists())
    throw new GradleException("Tomcat home directory ${tomcatDirProp} does not exist.")
project.ext.tomcatDir = tomcatDirProp

// This loads all the properties in the root gradle.properties file. We don't want to include this project in on the
// main build. This allows us to avoid duplicating properties, while keeping this build siloed.
Properties props = new Properties()
props.load(new FileInputStream("$mainProjectDir/gradle.properties"))
props.each { prop ->
    project.ext.set(prop.key, prop.value)
}

apply plugin: 'java'

project.buildDir = "${mainProjectDir}/build/remoteLogin"

sourceSets {
    api {
        output.classesDir = "${getBuildDir()}/api"
        java {
            srcDirs = ["api/src"]
        }
    }
}

repositories {
    flatDir dirs: "${tomcatDir}/lib"
}

dependencies {
    apiCompile "javax.servlet:servlet-api:${servletApiVersion}"
    apiCompile "com.sun.mail:javax.mail:${javaxMailVersion}"
    apiCompile 'org.apache.tomcat:jsp-api'
}

tasks.withType(Jar) {
    destinationDir = file("$buildDir")
}

task('sampleClient', type: Copy) {
    from "${projectDir}/sampleClient"
    into "${getBuildDir()}/sampleClient"
}

task('remoteLoginApiJar', type: Jar, dependsOn: 'sampleClient') {
    from sourceSets['api'].output
    archiveName "remoteLoginApiJar.jar"
    destinationDir file("${getBuildDir()}/sampleClient/WEB-INF/lib")
}
tasks.assemble.dependsOn(remoteLoginApiJar)

task('distCopy', type: Copy, dependsOn: ['clean', 'build']) {
    from("${getProjectDir().getParent()}")
    exclude("**/.gradle/**")
    into("${getBuildDir()}/src")
}

task('distJavaDocs', type: Javadoc, dependsOn: 'distCopy') {
    source = sourceSets.api.allJava
    classpath = sourceSets.api.output + sourceSets.api.compileClasspath
    destinationDir = file("${getBuildDir()}/javadoc")
}

task('dist', type: Zip, dependsOn: 'distJavaDocs') {
    from(buildDir)
    exclude("api/**")
    exclude("tmp/**")
    destinationDir = file("${mainProjectDir}/dist")
    archiveName = "remoteLogin.zip"
}

tasks.build.mustRunAfter(tasks.clean)

println("${getProjectDir().getParent()}")