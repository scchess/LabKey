/*
 * Copyright (c) 2014-2016 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.luminex;

import org.labkey.api.exp.api.ExpRun;
import org.labkey.api.exp.api.ExperimentService;
import org.labkey.api.pipeline.PipeRoot;
import org.labkey.api.pipeline.PipelineJob;
import org.labkey.api.study.assay.AssayProvider;
import org.labkey.api.study.assay.AssayService;
import org.labkey.api.study.assay.AssayUrls;
import org.labkey.api.util.FileUtil;
import org.labkey.api.util.PageFlowUtil;
import org.labkey.api.util.URLHelper;
import org.labkey.api.view.ViewBackgroundInfo;

import java.io.File;

public class LuminexExclusionPipelineJob extends PipelineJob
{
    private LuminexSaveExclusionsForm _form;
    private LuminexManager.ExclusionType _exclusionType;
    private Integer _runId;

    private transient AssayProvider _provider;
    private transient ExpRun _run;

    public LuminexExclusionPipelineJob(ViewBackgroundInfo info, PipeRoot root, LuminexSaveExclusionsForm form)
    {
        super(LuminexAssayProvider.NAME, info, root);

        File logFile = new File(root.getLogDirectory(), FileUtil.makeFileNameWithTimestamp("luminex_exclusion", "log"));
        setLogFile(logFile);

        _form = form;
        _exclusionType = LuminexManager.ExclusionType.valueOf(form.getTableName());
        _runId = form.getRunId();

        // Issue 22015: log exclusion command properties on job creation instead of when it starts to run
        for (LuminexSingleExclusionCommand command : _form.getCommands())
        {
            logProperties(command);
        }
    }

    @Override
    public URLHelper getStatusHref()
    {
        if (getRun() != null)
        {
            return PageFlowUtil.urlProvider(AssayUrls.class).getAssayResultsURL(getRun().getContainer(), getRun().getProtocol(), getRun().getRowId());
        }
        return null;
    }

    @Override
    public String getDescription()
    {
        return "Luminex Exclusion" + (getRun() != null ? ": " + getRun().getName() : "");
    }

    @Override
    public void run()
    {
        try
        {
            setStatus(TaskStatus.running, getJobInfo());
            LuminexManager.get().createExclusions(
                getInfo().getUser(), getInfo().getContainer(), _form.getCommands(), _form.getRunId(),
                _exclusionType, _form.getProtocol(getContainer()), getAssayProvider(), true, getLogger()
            );

            setStatus(TaskStatus.complete, getJobInfo());
        }
        catch (Exception e)
        {
            getLogger().error("The following error was generated by the exclusion:\n");
            getLogger().error(e.getMessage() + "\n");
            setStatus(TaskStatus.error, e.getMessage());
            getLogger().info("Error StackTrace", e);
        }
    }

    private void logProperties(LuminexSingleExclusionCommand exclusion)
    {
        getLogger().info("----- Exclusion Properties ---------");
        getLogger().info("Type: " + _exclusionType.getDescription(exclusion));
        if (getRun() != null)
            getLogger().info("Assay Id: " + getRun().getName());
        getLogger().info("Run Id: " + _form.getRunId());
        if (exclusion.getDataId() != null)
            getLogger().info("Data Id: " + exclusion.getDataId());
        getLogger().info("Description: " + propertyNullToBlank(exclusion.getDescription()));
        if (exclusion.getType() != null)
            getLogger().info("Type: " + exclusion.getType());
        if (exclusion.getDilution() != null)
            getLogger().info("Dilution: " + exclusion.getDilution());
        if (exclusion.getWell() != null)
            getLogger().info("Well: " + exclusion.getWell());
        getLogger().info("Analytes: " + propertyNullToBlank(exclusion.getAnalyteNames()));
        getLogger().info("Comment: " + propertyNullToBlank(exclusion.getComment()));
        getLogger().info("----- End Exclusion Properties -----");
    }

    private String propertyNullToBlank(String value)
    {
        return value == null ? "[Blank]" : value;
    }

    private String getJobInfo()
    {
        return _exclusionType.getInfo(_form.getCommands());
    }

    private AssayProvider getAssayProvider()
    {
        if (_provider == null)
        {
            _provider = AssayService.get().getProvider(_form.getProtocol(getContainer()));
        }
        return _provider;
    }

    private ExpRun getRun()
    {
        if (_run == null)
        {
            _run = ExperimentService.get().getExpRun(_runId);
        }
        return _run;
    }
}
