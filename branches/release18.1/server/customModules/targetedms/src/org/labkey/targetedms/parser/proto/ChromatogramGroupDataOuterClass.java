/*
 * Copyright (c) 2017 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChromatogramGroupData.proto

package org.labkey.targetedms.parser.proto;

public final class ChromatogramGroupDataOuterClass {
  private ChromatogramGroupDataOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChromatogramGroupDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ChromatogramGroupData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList> 
        getTimeListsList();
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList getTimeLists(int index);
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    int getTimeListsCount();
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder> 
        getTimeListsOrBuilderList();
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder getTimeListsOrBuilder(
        int index);

    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList> 
        getScanIdListsList();
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList getScanIdLists(int index);
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    int getScanIdListsCount();
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder> 
        getScanIdListsOrBuilderList();
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder getScanIdListsOrBuilder(
        int index);

    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram> 
        getChromatogramsList();
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram getChromatograms(int index);
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    int getChromatogramsCount();
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder> 
        getChromatogramsOrBuilderList();
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder getChromatogramsOrBuilder(
        int index);

    /**
     * <code>optional double interpolatedStartTime = 4;</code>
     */
    double getInterpolatedStartTime();

    /**
     * <code>optional double interpolatedEndTime = 5;</code>
     */
    double getInterpolatedEndTime();

    /**
     * <code>optional int32 interpolatedNumPoints = 6;</code>
     */
    int getInterpolatedNumPoints();

    /**
     * <code>optional double interpolatedDelta = 7;</code>
     */
    double getInterpolatedDelta();

    /**
     * <code>optional bool inferZeroes = 9;</code>
     */
    boolean getInferZeroes();
  }
  /**
   * Protobuf type {@code ChromatogramGroupData}
   */
  public  static final class ChromatogramGroupData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ChromatogramGroupData)
      ChromatogramGroupDataOrBuilder {
    // Use ChromatogramGroupData.newBuilder() to construct.
    private ChromatogramGroupData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChromatogramGroupData() {
      timeLists_ = java.util.Collections.emptyList();
      scanIdLists_ = java.util.Collections.emptyList();
      chromatograms_ = java.util.Collections.emptyList();
      interpolatedStartTime_ = 0D;
      interpolatedEndTime_ = 0D;
      interpolatedNumPoints_ = 0;
      interpolatedDelta_ = 0D;
      inferZeroes_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ChromatogramGroupData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                timeLists_ = new java.util.ArrayList<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList>();
                mutable_bitField0_ |= 0x00000001;
              }
              timeLists_.add(
                  input.readMessage(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                scanIdLists_ = new java.util.ArrayList<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList>();
                mutable_bitField0_ |= 0x00000002;
              }
              scanIdLists_.add(
                  input.readMessage(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                chromatograms_ = new java.util.ArrayList<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram>();
                mutable_bitField0_ |= 0x00000004;
              }
              chromatograms_.add(
                  input.readMessage(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.parser(), extensionRegistry));
              break;
            }
            case 33: {

              interpolatedStartTime_ = input.readDouble();
              break;
            }
            case 41: {

              interpolatedEndTime_ = input.readDouble();
              break;
            }
            case 48: {

              interpolatedNumPoints_ = input.readInt32();
              break;
            }
            case 57: {

              interpolatedDelta_ = input.readDouble();
              break;
            }
            case 72: {

              inferZeroes_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          timeLists_ = java.util.Collections.unmodifiableList(timeLists_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          scanIdLists_ = java.util.Collections.unmodifiableList(scanIdLists_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          chromatograms_ = java.util.Collections.unmodifiableList(chromatograms_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Builder.class);
    }

    public interface TimeListOrBuilder extends
        // @@protoc_insertion_point(interface_extends:ChromatogramGroupData.TimeList)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated float times = 1;</code>
       */
      java.util.List<java.lang.Float> getTimesList();
      /**
       * <code>repeated float times = 1;</code>
       */
      int getTimesCount();
      /**
       * <code>repeated float times = 1;</code>
       */
      float getTimes(int index);
    }
    /**
     * Protobuf type {@code ChromatogramGroupData.TimeList}
     */
    public  static final class TimeList extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:ChromatogramGroupData.TimeList)
        TimeListOrBuilder {
      // Use TimeList.newBuilder() to construct.
      private TimeList(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TimeList() {
        times_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private TimeList(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 13: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  times_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000001;
                }
                times_.add(input.readFloat());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  times_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  times_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            times_ = java.util.Collections.unmodifiableList(times_);
          }
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_TimeList_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_TimeList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder.class);
      }

      public static final int TIMES_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Float> times_;
      /**
       * <code>repeated float times = 1;</code>
       */
      public java.util.List<java.lang.Float>
          getTimesList() {
        return times_;
      }
      /**
       * <code>repeated float times = 1;</code>
       */
      public int getTimesCount() {
        return times_.size();
      }
      /**
       * <code>repeated float times = 1;</code>
       */
      public float getTimes(int index) {
        return times_.get(index);
      }
      private int timesMemoizedSerializedSize = -1;

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getTimesList().size() > 0) {
          output.writeUInt32NoTag(10);
          output.writeUInt32NoTag(timesMemoizedSerializedSize);
        }
        for (int i = 0; i < times_.size(); i++) {
          output.writeFloatNoTag(times_.get(i));
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          dataSize = 4 * getTimesList().size();
          size += dataSize;
          if (!getTimesList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          timesMemoizedSerializedSize = dataSize;
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList)) {
          return super.equals(obj);
        }
        org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList other = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList) obj;

        boolean result = true;
        result = result && getTimesList()
            .equals(other.getTimesList());
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (getTimesCount() > 0) {
          hash = (37 * hash) + TIMES_FIELD_NUMBER;
          hash = (53 * hash) + getTimesList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code ChromatogramGroupData.TimeList}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:ChromatogramGroupData.TimeList)
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_TimeList_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_TimeList_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder.class);
        }

        // Construct using org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          times_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_TimeList_descriptor;
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList getDefaultInstanceForType() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.getDefaultInstance();
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList build() {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList buildPartial() {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList result = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            times_ = java.util.Collections.unmodifiableList(times_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.times_ = times_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList) {
            return mergeFrom((org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList other) {
          if (other == org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.getDefaultInstance()) return this;
          if (!other.times_.isEmpty()) {
            if (times_.isEmpty()) {
              times_ = other.times_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTimesIsMutable();
              times_.addAll(other.times_);
            }
            onChanged();
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.util.List<java.lang.Float> times_ = java.util.Collections.emptyList();
        private void ensureTimesIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            times_ = new java.util.ArrayList<java.lang.Float>(times_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated float times = 1;</code>
         */
        public java.util.List<java.lang.Float>
            getTimesList() {
          return java.util.Collections.unmodifiableList(times_);
        }
        /**
         * <code>repeated float times = 1;</code>
         */
        public int getTimesCount() {
          return times_.size();
        }
        /**
         * <code>repeated float times = 1;</code>
         */
        public float getTimes(int index) {
          return times_.get(index);
        }
        /**
         * <code>repeated float times = 1;</code>
         */
        public Builder setTimes(
            int index, float value) {
          ensureTimesIsMutable();
          times_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float times = 1;</code>
         */
        public Builder addTimes(float value) {
          ensureTimesIsMutable();
          times_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float times = 1;</code>
         */
        public Builder addAllTimes(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureTimesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, times_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float times = 1;</code>
         */
        public Builder clearTimes() {
          times_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:ChromatogramGroupData.TimeList)
      }

      // @@protoc_insertion_point(class_scope:ChromatogramGroupData.TimeList)
      private static final org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList();
      }

      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TimeList>
          PARSER = new com.google.protobuf.AbstractParser<TimeList>() {
        public TimeList parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new TimeList(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<TimeList> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TimeList> getParserForType() {
        return PARSER;
      }

      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ScanIdListOrBuilder extends
        // @@protoc_insertion_point(interface_extends:ChromatogramGroupData.ScanIdList)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated int32 scanIds = 2;</code>
       */
      java.util.List<java.lang.Integer> getScanIdsList();
      /**
       * <code>repeated int32 scanIds = 2;</code>
       */
      int getScanIdsCount();
      /**
       * <code>repeated int32 scanIds = 2;</code>
       */
      int getScanIds(int index);
    }
    /**
     * Protobuf type {@code ChromatogramGroupData.ScanIdList}
     */
    public  static final class ScanIdList extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:ChromatogramGroupData.ScanIdList)
        ScanIdListOrBuilder {
      // Use ScanIdList.newBuilder() to construct.
      private ScanIdList(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ScanIdList() {
        scanIds_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private ScanIdList(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  scanIds_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                scanIds_.add(input.readInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  scanIds_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  scanIds_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            scanIds_ = java.util.Collections.unmodifiableList(scanIds_);
          }
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_ScanIdList_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_ScanIdList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder.class);
      }

      public static final int SCANIDS_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> scanIds_;
      /**
       * <code>repeated int32 scanIds = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getScanIdsList() {
        return scanIds_;
      }
      /**
       * <code>repeated int32 scanIds = 2;</code>
       */
      public int getScanIdsCount() {
        return scanIds_.size();
      }
      /**
       * <code>repeated int32 scanIds = 2;</code>
       */
      public int getScanIds(int index) {
        return scanIds_.get(index);
      }
      private int scanIdsMemoizedSerializedSize = -1;

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getScanIdsList().size() > 0) {
          output.writeUInt32NoTag(18);
          output.writeUInt32NoTag(scanIdsMemoizedSerializedSize);
        }
        for (int i = 0; i < scanIds_.size(); i++) {
          output.writeInt32NoTag(scanIds_.get(i));
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < scanIds_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(scanIds_.get(i));
          }
          size += dataSize;
          if (!getScanIdsList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          scanIdsMemoizedSerializedSize = dataSize;
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList)) {
          return super.equals(obj);
        }
        org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList other = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList) obj;

        boolean result = true;
        result = result && getScanIdsList()
            .equals(other.getScanIdsList());
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        if (getScanIdsCount() > 0) {
          hash = (37 * hash) + SCANIDS_FIELD_NUMBER;
          hash = (53 * hash) + getScanIdsList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code ChromatogramGroupData.ScanIdList}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:ChromatogramGroupData.ScanIdList)
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_ScanIdList_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_ScanIdList_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder.class);
        }

        // Construct using org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          scanIds_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_ScanIdList_descriptor;
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList getDefaultInstanceForType() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.getDefaultInstance();
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList build() {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList buildPartial() {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList result = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            scanIds_ = java.util.Collections.unmodifiableList(scanIds_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.scanIds_ = scanIds_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList) {
            return mergeFrom((org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList other) {
          if (other == org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.getDefaultInstance()) return this;
          if (!other.scanIds_.isEmpty()) {
            if (scanIds_.isEmpty()) {
              scanIds_ = other.scanIds_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureScanIdsIsMutable();
              scanIds_.addAll(other.scanIds_);
            }
            onChanged();
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.util.List<java.lang.Integer> scanIds_ = java.util.Collections.emptyList();
        private void ensureScanIdsIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            scanIds_ = new java.util.ArrayList<java.lang.Integer>(scanIds_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated int32 scanIds = 2;</code>
         */
        public java.util.List<java.lang.Integer>
            getScanIdsList() {
          return java.util.Collections.unmodifiableList(scanIds_);
        }
        /**
         * <code>repeated int32 scanIds = 2;</code>
         */
        public int getScanIdsCount() {
          return scanIds_.size();
        }
        /**
         * <code>repeated int32 scanIds = 2;</code>
         */
        public int getScanIds(int index) {
          return scanIds_.get(index);
        }
        /**
         * <code>repeated int32 scanIds = 2;</code>
         */
        public Builder setScanIds(
            int index, int value) {
          ensureScanIdsIsMutable();
          scanIds_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 scanIds = 2;</code>
         */
        public Builder addScanIds(int value) {
          ensureScanIdsIsMutable();
          scanIds_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 scanIds = 2;</code>
         */
        public Builder addAllScanIds(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureScanIdsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, scanIds_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 scanIds = 2;</code>
         */
        public Builder clearScanIds() {
          scanIds_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:ChromatogramGroupData.ScanIdList)
      }

      // @@protoc_insertion_point(class_scope:ChromatogramGroupData.ScanIdList)
      private static final org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList();
      }

      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ScanIdList>
          PARSER = new com.google.protobuf.AbstractParser<ScanIdList>() {
        public ScanIdList parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new ScanIdList(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ScanIdList> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ScanIdList> getParserForType() {
        return PARSER;
      }

      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ChromatogramOrBuilder extends
        // @@protoc_insertion_point(interface_extends:ChromatogramGroupData.Chromatogram)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * One-based index into "timeLists" indicating which set of times to use.
       * </pre>
       *
       * <code>optional int32 timeListIndex = 1;</code>
       */
      int getTimeListIndex();

      /**
       * <code>repeated float intensities = 2;</code>
       */
      java.util.List<java.lang.Float> getIntensitiesList();
      /**
       * <code>repeated float intensities = 2;</code>
       */
      int getIntensitiesCount();
      /**
       * <code>repeated float intensities = 2;</code>
       */
      float getIntensities(int index);

      /**
       * <code>repeated float massErrorsDeprecated = 3;</code>
       */
      java.util.List<java.lang.Float> getMassErrorsDeprecatedList();
      /**
       * <code>repeated float massErrorsDeprecated = 3;</code>
       */
      int getMassErrorsDeprecatedCount();
      /**
       * <code>repeated float massErrorsDeprecated = 3;</code>
       */
      float getMassErrorsDeprecated(int index);

      /**
       * <code>repeated sint32 massErrors100X = 5;</code>
       */
      java.util.List<java.lang.Integer> getMassErrors100XList();
      /**
       * <code>repeated sint32 massErrors100X = 5;</code>
       */
      int getMassErrors100XCount();
      /**
       * <code>repeated sint32 massErrors100X = 5;</code>
       */
      int getMassErrors100X(int index);

      /**
       * <pre>
       * One-based index into "scanIdLists" or zero if no scanIds
       * </pre>
       *
       * <code>optional int32 scanIdListIndex = 4;</code>
       */
      int getScanIdListIndex();
    }
    /**
     * Protobuf type {@code ChromatogramGroupData.Chromatogram}
     */
    public  static final class Chromatogram extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:ChromatogramGroupData.Chromatogram)
        ChromatogramOrBuilder {
      // Use Chromatogram.newBuilder() to construct.
      private Chromatogram(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Chromatogram() {
        timeListIndex_ = 0;
        intensities_ = java.util.Collections.emptyList();
        massErrorsDeprecated_ = java.util.Collections.emptyList();
        massErrors100X_ = java.util.Collections.emptyList();
        scanIdListIndex_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Chromatogram(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                timeListIndex_ = input.readInt32();
                break;
              }
              case 21: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  intensities_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000002;
                }
                intensities_.add(input.readFloat());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  intensities_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  intensities_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 29: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  massErrorsDeprecated_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000004;
                }
                massErrorsDeprecated_.add(input.readFloat());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  massErrorsDeprecated_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  massErrorsDeprecated_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {

                scanIdListIndex_ = input.readInt32();
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  massErrors100X_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                massErrors100X_.add(input.readSInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  massErrors100X_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  massErrors100X_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            intensities_ = java.util.Collections.unmodifiableList(intensities_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            massErrorsDeprecated_ = java.util.Collections.unmodifiableList(massErrorsDeprecated_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            massErrors100X_ = java.util.Collections.unmodifiableList(massErrors100X_);
          }
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_Chromatogram_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_Chromatogram_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder.class);
      }

      private int bitField0_;
      public static final int TIMELISTINDEX_FIELD_NUMBER = 1;
      private int timeListIndex_;
      /**
       * <pre>
       * One-based index into "timeLists" indicating which set of times to use.
       * </pre>
       *
       * <code>optional int32 timeListIndex = 1;</code>
       */
      public int getTimeListIndex() {
        return timeListIndex_;
      }

      public static final int INTENSITIES_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Float> intensities_;
      /**
       * <code>repeated float intensities = 2;</code>
       */
      public java.util.List<java.lang.Float>
          getIntensitiesList() {
        return intensities_;
      }
      /**
       * <code>repeated float intensities = 2;</code>
       */
      public int getIntensitiesCount() {
        return intensities_.size();
      }
      /**
       * <code>repeated float intensities = 2;</code>
       */
      public float getIntensities(int index) {
        return intensities_.get(index);
      }
      private int intensitiesMemoizedSerializedSize = -1;

      public static final int MASSERRORSDEPRECATED_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Float> massErrorsDeprecated_;
      /**
       * <code>repeated float massErrorsDeprecated = 3;</code>
       */
      public java.util.List<java.lang.Float>
          getMassErrorsDeprecatedList() {
        return massErrorsDeprecated_;
      }
      /**
       * <code>repeated float massErrorsDeprecated = 3;</code>
       */
      public int getMassErrorsDeprecatedCount() {
        return massErrorsDeprecated_.size();
      }
      /**
       * <code>repeated float massErrorsDeprecated = 3;</code>
       */
      public float getMassErrorsDeprecated(int index) {
        return massErrorsDeprecated_.get(index);
      }
      private int massErrorsDeprecatedMemoizedSerializedSize = -1;

      public static final int MASSERRORS100X_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> massErrors100X_;
      /**
       * <code>repeated sint32 massErrors100X = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getMassErrors100XList() {
        return massErrors100X_;
      }
      /**
       * <code>repeated sint32 massErrors100X = 5;</code>
       */
      public int getMassErrors100XCount() {
        return massErrors100X_.size();
      }
      /**
       * <code>repeated sint32 massErrors100X = 5;</code>
       */
      public int getMassErrors100X(int index) {
        return massErrors100X_.get(index);
      }
      private int massErrors100XMemoizedSerializedSize = -1;

      public static final int SCANIDLISTINDEX_FIELD_NUMBER = 4;
      private int scanIdListIndex_;
      /**
       * <pre>
       * One-based index into "scanIdLists" or zero if no scanIds
       * </pre>
       *
       * <code>optional int32 scanIdListIndex = 4;</code>
       */
      public int getScanIdListIndex() {
        return scanIdListIndex_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (timeListIndex_ != 0) {
          output.writeInt32(1, timeListIndex_);
        }
        if (getIntensitiesList().size() > 0) {
          output.writeUInt32NoTag(18);
          output.writeUInt32NoTag(intensitiesMemoizedSerializedSize);
        }
        for (int i = 0; i < intensities_.size(); i++) {
          output.writeFloatNoTag(intensities_.get(i));
        }
        if (getMassErrorsDeprecatedList().size() > 0) {
          output.writeUInt32NoTag(26);
          output.writeUInt32NoTag(massErrorsDeprecatedMemoizedSerializedSize);
        }
        for (int i = 0; i < massErrorsDeprecated_.size(); i++) {
          output.writeFloatNoTag(massErrorsDeprecated_.get(i));
        }
        if (scanIdListIndex_ != 0) {
          output.writeInt32(4, scanIdListIndex_);
        }
        if (getMassErrors100XList().size() > 0) {
          output.writeUInt32NoTag(42);
          output.writeUInt32NoTag(massErrors100XMemoizedSerializedSize);
        }
        for (int i = 0; i < massErrors100X_.size(); i++) {
          output.writeSInt32NoTag(massErrors100X_.get(i));
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (timeListIndex_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, timeListIndex_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getIntensitiesList().size();
          size += dataSize;
          if (!getIntensitiesList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          intensitiesMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * getMassErrorsDeprecatedList().size();
          size += dataSize;
          if (!getMassErrorsDeprecatedList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          massErrorsDeprecatedMemoizedSerializedSize = dataSize;
        }
        if (scanIdListIndex_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, scanIdListIndex_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < massErrors100X_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(massErrors100X_.get(i));
          }
          size += dataSize;
          if (!getMassErrors100XList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          massErrors100XMemoizedSerializedSize = dataSize;
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram)) {
          return super.equals(obj);
        }
        org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram other = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram) obj;

        boolean result = true;
        result = result && (getTimeListIndex()
            == other.getTimeListIndex());
        result = result && getIntensitiesList()
            .equals(other.getIntensitiesList());
        result = result && getMassErrorsDeprecatedList()
            .equals(other.getMassErrorsDeprecatedList());
        result = result && getMassErrors100XList()
            .equals(other.getMassErrors100XList());
        result = result && (getScanIdListIndex()
            == other.getScanIdListIndex());
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptorForType().hashCode();
        hash = (37 * hash) + TIMELISTINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getTimeListIndex();
        if (getIntensitiesCount() > 0) {
          hash = (37 * hash) + INTENSITIES_FIELD_NUMBER;
          hash = (53 * hash) + getIntensitiesList().hashCode();
        }
        if (getMassErrorsDeprecatedCount() > 0) {
          hash = (37 * hash) + MASSERRORSDEPRECATED_FIELD_NUMBER;
          hash = (53 * hash) + getMassErrorsDeprecatedList().hashCode();
        }
        if (getMassErrors100XCount() > 0) {
          hash = (37 * hash) + MASSERRORS100X_FIELD_NUMBER;
          hash = (53 * hash) + getMassErrors100XList().hashCode();
        }
        hash = (37 * hash) + SCANIDLISTINDEX_FIELD_NUMBER;
        hash = (53 * hash) + getScanIdListIndex();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code ChromatogramGroupData.Chromatogram}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:ChromatogramGroupData.Chromatogram)
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_Chromatogram_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_Chromatogram_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder.class);
        }

        // Construct using org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          timeListIndex_ = 0;

          intensities_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          massErrorsDeprecated_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          massErrors100X_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          scanIdListIndex_ = 0;

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_Chromatogram_descriptor;
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram getDefaultInstanceForType() {
          return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.getDefaultInstance();
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram build() {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram buildPartial() {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram result = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.timeListIndex_ = timeListIndex_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            intensities_ = java.util.Collections.unmodifiableList(intensities_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.intensities_ = intensities_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            massErrorsDeprecated_ = java.util.Collections.unmodifiableList(massErrorsDeprecated_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.massErrorsDeprecated_ = massErrorsDeprecated_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            massErrors100X_ = java.util.Collections.unmodifiableList(massErrors100X_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.massErrors100X_ = massErrors100X_;
          result.scanIdListIndex_ = scanIdListIndex_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram) {
            return mergeFrom((org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram other) {
          if (other == org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.getDefaultInstance()) return this;
          if (other.getTimeListIndex() != 0) {
            setTimeListIndex(other.getTimeListIndex());
          }
          if (!other.intensities_.isEmpty()) {
            if (intensities_.isEmpty()) {
              intensities_ = other.intensities_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureIntensitiesIsMutable();
              intensities_.addAll(other.intensities_);
            }
            onChanged();
          }
          if (!other.massErrorsDeprecated_.isEmpty()) {
            if (massErrorsDeprecated_.isEmpty()) {
              massErrorsDeprecated_ = other.massErrorsDeprecated_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMassErrorsDeprecatedIsMutable();
              massErrorsDeprecated_.addAll(other.massErrorsDeprecated_);
            }
            onChanged();
          }
          if (!other.massErrors100X_.isEmpty()) {
            if (massErrors100X_.isEmpty()) {
              massErrors100X_ = other.massErrors100X_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMassErrors100XIsMutable();
              massErrors100X_.addAll(other.massErrors100X_);
            }
            onChanged();
          }
          if (other.getScanIdListIndex() != 0) {
            setScanIdListIndex(other.getScanIdListIndex());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int timeListIndex_ ;
        /**
         * <pre>
         * One-based index into "timeLists" indicating which set of times to use.
         * </pre>
         *
         * <code>optional int32 timeListIndex = 1;</code>
         */
        public int getTimeListIndex() {
          return timeListIndex_;
        }
        /**
         * <pre>
         * One-based index into "timeLists" indicating which set of times to use.
         * </pre>
         *
         * <code>optional int32 timeListIndex = 1;</code>
         */
        public Builder setTimeListIndex(int value) {
          
          timeListIndex_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One-based index into "timeLists" indicating which set of times to use.
         * </pre>
         *
         * <code>optional int32 timeListIndex = 1;</code>
         */
        public Builder clearTimeListIndex() {
          
          timeListIndex_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Float> intensities_ = java.util.Collections.emptyList();
        private void ensureIntensitiesIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            intensities_ = new java.util.ArrayList<java.lang.Float>(intensities_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated float intensities = 2;</code>
         */
        public java.util.List<java.lang.Float>
            getIntensitiesList() {
          return java.util.Collections.unmodifiableList(intensities_);
        }
        /**
         * <code>repeated float intensities = 2;</code>
         */
        public int getIntensitiesCount() {
          return intensities_.size();
        }
        /**
         * <code>repeated float intensities = 2;</code>
         */
        public float getIntensities(int index) {
          return intensities_.get(index);
        }
        /**
         * <code>repeated float intensities = 2;</code>
         */
        public Builder setIntensities(
            int index, float value) {
          ensureIntensitiesIsMutable();
          intensities_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float intensities = 2;</code>
         */
        public Builder addIntensities(float value) {
          ensureIntensitiesIsMutable();
          intensities_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float intensities = 2;</code>
         */
        public Builder addAllIntensities(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureIntensitiesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, intensities_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float intensities = 2;</code>
         */
        public Builder clearIntensities() {
          intensities_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Float> massErrorsDeprecated_ = java.util.Collections.emptyList();
        private void ensureMassErrorsDeprecatedIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            massErrorsDeprecated_ = new java.util.ArrayList<java.lang.Float>(massErrorsDeprecated_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated float massErrorsDeprecated = 3;</code>
         */
        public java.util.List<java.lang.Float>
            getMassErrorsDeprecatedList() {
          return java.util.Collections.unmodifiableList(massErrorsDeprecated_);
        }
        /**
         * <code>repeated float massErrorsDeprecated = 3;</code>
         */
        public int getMassErrorsDeprecatedCount() {
          return massErrorsDeprecated_.size();
        }
        /**
         * <code>repeated float massErrorsDeprecated = 3;</code>
         */
        public float getMassErrorsDeprecated(int index) {
          return massErrorsDeprecated_.get(index);
        }
        /**
         * <code>repeated float massErrorsDeprecated = 3;</code>
         */
        public Builder setMassErrorsDeprecated(
            int index, float value) {
          ensureMassErrorsDeprecatedIsMutable();
          massErrorsDeprecated_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float massErrorsDeprecated = 3;</code>
         */
        public Builder addMassErrorsDeprecated(float value) {
          ensureMassErrorsDeprecatedIsMutable();
          massErrorsDeprecated_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float massErrorsDeprecated = 3;</code>
         */
        public Builder addAllMassErrorsDeprecated(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureMassErrorsDeprecatedIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, massErrorsDeprecated_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float massErrorsDeprecated = 3;</code>
         */
        public Builder clearMassErrorsDeprecated() {
          massErrorsDeprecated_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Integer> massErrors100X_ = java.util.Collections.emptyList();
        private void ensureMassErrors100XIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            massErrors100X_ = new java.util.ArrayList<java.lang.Integer>(massErrors100X_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated sint32 massErrors100X = 5;</code>
         */
        public java.util.List<java.lang.Integer>
            getMassErrors100XList() {
          return java.util.Collections.unmodifiableList(massErrors100X_);
        }
        /**
         * <code>repeated sint32 massErrors100X = 5;</code>
         */
        public int getMassErrors100XCount() {
          return massErrors100X_.size();
        }
        /**
         * <code>repeated sint32 massErrors100X = 5;</code>
         */
        public int getMassErrors100X(int index) {
          return massErrors100X_.get(index);
        }
        /**
         * <code>repeated sint32 massErrors100X = 5;</code>
         */
        public Builder setMassErrors100X(
            int index, int value) {
          ensureMassErrors100XIsMutable();
          massErrors100X_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 massErrors100X = 5;</code>
         */
        public Builder addMassErrors100X(int value) {
          ensureMassErrors100XIsMutable();
          massErrors100X_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 massErrors100X = 5;</code>
         */
        public Builder addAllMassErrors100X(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureMassErrors100XIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, massErrors100X_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 massErrors100X = 5;</code>
         */
        public Builder clearMassErrors100X() {
          massErrors100X_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        private int scanIdListIndex_ ;
        /**
         * <pre>
         * One-based index into "scanIdLists" or zero if no scanIds
         * </pre>
         *
         * <code>optional int32 scanIdListIndex = 4;</code>
         */
        public int getScanIdListIndex() {
          return scanIdListIndex_;
        }
        /**
         * <pre>
         * One-based index into "scanIdLists" or zero if no scanIds
         * </pre>
         *
         * <code>optional int32 scanIdListIndex = 4;</code>
         */
        public Builder setScanIdListIndex(int value) {
          
          scanIdListIndex_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * One-based index into "scanIdLists" or zero if no scanIds
         * </pre>
         *
         * <code>optional int32 scanIdListIndex = 4;</code>
         */
        public Builder clearScanIdListIndex() {
          
          scanIdListIndex_ = 0;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:ChromatogramGroupData.Chromatogram)
      }

      // @@protoc_insertion_point(class_scope:ChromatogramGroupData.Chromatogram)
      private static final org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram();
      }

      public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Chromatogram>
          PARSER = new com.google.protobuf.AbstractParser<Chromatogram>() {
        public Chromatogram parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Chromatogram(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Chromatogram> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Chromatogram> getParserForType() {
        return PARSER;
      }

      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TIMELISTS_FIELD_NUMBER = 1;
    private java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList> timeLists_;
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList> getTimeListsList() {
      return timeLists_;
    }
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    public java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder> 
        getTimeListsOrBuilderList() {
      return timeLists_;
    }
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    public int getTimeListsCount() {
      return timeLists_.size();
    }
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList getTimeLists(int index) {
      return timeLists_.get(index);
    }
    /**
     * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
     */
    public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder getTimeListsOrBuilder(
        int index) {
      return timeLists_.get(index);
    }

    public static final int SCANIDLISTS_FIELD_NUMBER = 2;
    private java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList> scanIdLists_;
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList> getScanIdListsList() {
      return scanIdLists_;
    }
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    public java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder> 
        getScanIdListsOrBuilderList() {
      return scanIdLists_;
    }
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    public int getScanIdListsCount() {
      return scanIdLists_.size();
    }
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList getScanIdLists(int index) {
      return scanIdLists_.get(index);
    }
    /**
     * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
     */
    public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder getScanIdListsOrBuilder(
        int index) {
      return scanIdLists_.get(index);
    }

    public static final int CHROMATOGRAMS_FIELD_NUMBER = 3;
    private java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram> chromatograms_;
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram> getChromatogramsList() {
      return chromatograms_;
    }
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    public java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder> 
        getChromatogramsOrBuilderList() {
      return chromatograms_;
    }
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    public int getChromatogramsCount() {
      return chromatograms_.size();
    }
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram getChromatograms(int index) {
      return chromatograms_.get(index);
    }
    /**
     * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
     */
    public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder getChromatogramsOrBuilder(
        int index) {
      return chromatograms_.get(index);
    }

    public static final int INTERPOLATEDSTARTTIME_FIELD_NUMBER = 4;
    private double interpolatedStartTime_;
    /**
     * <code>optional double interpolatedStartTime = 4;</code>
     */
    public double getInterpolatedStartTime() {
      return interpolatedStartTime_;
    }

    public static final int INTERPOLATEDENDTIME_FIELD_NUMBER = 5;
    private double interpolatedEndTime_;
    /**
     * <code>optional double interpolatedEndTime = 5;</code>
     */
    public double getInterpolatedEndTime() {
      return interpolatedEndTime_;
    }

    public static final int INTERPOLATEDNUMPOINTS_FIELD_NUMBER = 6;
    private int interpolatedNumPoints_;
    /**
     * <code>optional int32 interpolatedNumPoints = 6;</code>
     */
    public int getInterpolatedNumPoints() {
      return interpolatedNumPoints_;
    }

    public static final int INTERPOLATEDDELTA_FIELD_NUMBER = 7;
    private double interpolatedDelta_;
    /**
     * <code>optional double interpolatedDelta = 7;</code>
     */
    public double getInterpolatedDelta() {
      return interpolatedDelta_;
    }

    public static final int INFERZEROES_FIELD_NUMBER = 9;
    private boolean inferZeroes_;
    /**
     * <code>optional bool inferZeroes = 9;</code>
     */
    public boolean getInferZeroes() {
      return inferZeroes_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < timeLists_.size(); i++) {
        output.writeMessage(1, timeLists_.get(i));
      }
      for (int i = 0; i < scanIdLists_.size(); i++) {
        output.writeMessage(2, scanIdLists_.get(i));
      }
      for (int i = 0; i < chromatograms_.size(); i++) {
        output.writeMessage(3, chromatograms_.get(i));
      }
      if (interpolatedStartTime_ != 0D) {
        output.writeDouble(4, interpolatedStartTime_);
      }
      if (interpolatedEndTime_ != 0D) {
        output.writeDouble(5, interpolatedEndTime_);
      }
      if (interpolatedNumPoints_ != 0) {
        output.writeInt32(6, interpolatedNumPoints_);
      }
      if (interpolatedDelta_ != 0D) {
        output.writeDouble(7, interpolatedDelta_);
      }
      if (inferZeroes_ != false) {
        output.writeBool(9, inferZeroes_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < timeLists_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, timeLists_.get(i));
      }
      for (int i = 0; i < scanIdLists_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, scanIdLists_.get(i));
      }
      for (int i = 0; i < chromatograms_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, chromatograms_.get(i));
      }
      if (interpolatedStartTime_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, interpolatedStartTime_);
      }
      if (interpolatedEndTime_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, interpolatedEndTime_);
      }
      if (interpolatedNumPoints_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, interpolatedNumPoints_);
      }
      if (interpolatedDelta_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, interpolatedDelta_);
      }
      if (inferZeroes_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, inferZeroes_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData)) {
        return super.equals(obj);
      }
      org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData other = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData) obj;

      boolean result = true;
      result = result && getTimeListsList()
          .equals(other.getTimeListsList());
      result = result && getScanIdListsList()
          .equals(other.getScanIdListsList());
      result = result && getChromatogramsList()
          .equals(other.getChromatogramsList());
      result = result && (
          java.lang.Double.doubleToLongBits(getInterpolatedStartTime())
          == java.lang.Double.doubleToLongBits(
              other.getInterpolatedStartTime()));
      result = result && (
          java.lang.Double.doubleToLongBits(getInterpolatedEndTime())
          == java.lang.Double.doubleToLongBits(
              other.getInterpolatedEndTime()));
      result = result && (getInterpolatedNumPoints()
          == other.getInterpolatedNumPoints());
      result = result && (
          java.lang.Double.doubleToLongBits(getInterpolatedDelta())
          == java.lang.Double.doubleToLongBits(
              other.getInterpolatedDelta()));
      result = result && (getInferZeroes()
          == other.getInferZeroes());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getTimeListsCount() > 0) {
        hash = (37 * hash) + TIMELISTS_FIELD_NUMBER;
        hash = (53 * hash) + getTimeListsList().hashCode();
      }
      if (getScanIdListsCount() > 0) {
        hash = (37 * hash) + SCANIDLISTS_FIELD_NUMBER;
        hash = (53 * hash) + getScanIdListsList().hashCode();
      }
      if (getChromatogramsCount() > 0) {
        hash = (37 * hash) + CHROMATOGRAMS_FIELD_NUMBER;
        hash = (53 * hash) + getChromatogramsList().hashCode();
      }
      hash = (37 * hash) + INTERPOLATEDSTARTTIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getInterpolatedStartTime()));
      hash = (37 * hash) + INTERPOLATEDENDTIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getInterpolatedEndTime()));
      hash = (37 * hash) + INTERPOLATEDNUMPOINTS_FIELD_NUMBER;
      hash = (53 * hash) + getInterpolatedNumPoints();
      hash = (37 * hash) + INTERPOLATEDDELTA_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getInterpolatedDelta()));
      hash = (37 * hash) + INFERZEROES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getInferZeroes());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ChromatogramGroupData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ChromatogramGroupData)
        org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.class, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Builder.class);
      }

      // Construct using org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTimeListsFieldBuilder();
          getScanIdListsFieldBuilder();
          getChromatogramsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (timeListsBuilder_ == null) {
          timeLists_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          timeListsBuilder_.clear();
        }
        if (scanIdListsBuilder_ == null) {
          scanIdLists_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          scanIdListsBuilder_.clear();
        }
        if (chromatogramsBuilder_ == null) {
          chromatograms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          chromatogramsBuilder_.clear();
        }
        interpolatedStartTime_ = 0D;

        interpolatedEndTime_ = 0D;

        interpolatedNumPoints_ = 0;

        interpolatedDelta_ = 0D;

        inferZeroes_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.internal_static_ChromatogramGroupData_descriptor;
      }

      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData getDefaultInstanceForType() {
        return org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.getDefaultInstance();
      }

      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData build() {
        org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData buildPartial() {
        org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData result = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (timeListsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            timeLists_ = java.util.Collections.unmodifiableList(timeLists_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.timeLists_ = timeLists_;
        } else {
          result.timeLists_ = timeListsBuilder_.build();
        }
        if (scanIdListsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            scanIdLists_ = java.util.Collections.unmodifiableList(scanIdLists_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.scanIdLists_ = scanIdLists_;
        } else {
          result.scanIdLists_ = scanIdListsBuilder_.build();
        }
        if (chromatogramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            chromatograms_ = java.util.Collections.unmodifiableList(chromatograms_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.chromatograms_ = chromatograms_;
        } else {
          result.chromatograms_ = chromatogramsBuilder_.build();
        }
        result.interpolatedStartTime_ = interpolatedStartTime_;
        result.interpolatedEndTime_ = interpolatedEndTime_;
        result.interpolatedNumPoints_ = interpolatedNumPoints_;
        result.interpolatedDelta_ = interpolatedDelta_;
        result.inferZeroes_ = inferZeroes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData) {
          return mergeFrom((org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData other) {
        if (other == org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.getDefaultInstance()) return this;
        if (timeListsBuilder_ == null) {
          if (!other.timeLists_.isEmpty()) {
            if (timeLists_.isEmpty()) {
              timeLists_ = other.timeLists_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTimeListsIsMutable();
              timeLists_.addAll(other.timeLists_);
            }
            onChanged();
          }
        } else {
          if (!other.timeLists_.isEmpty()) {
            if (timeListsBuilder_.isEmpty()) {
              timeListsBuilder_.dispose();
              timeListsBuilder_ = null;
              timeLists_ = other.timeLists_;
              bitField0_ = (bitField0_ & ~0x00000001);
              timeListsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTimeListsFieldBuilder() : null;
            } else {
              timeListsBuilder_.addAllMessages(other.timeLists_);
            }
          }
        }
        if (scanIdListsBuilder_ == null) {
          if (!other.scanIdLists_.isEmpty()) {
            if (scanIdLists_.isEmpty()) {
              scanIdLists_ = other.scanIdLists_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureScanIdListsIsMutable();
              scanIdLists_.addAll(other.scanIdLists_);
            }
            onChanged();
          }
        } else {
          if (!other.scanIdLists_.isEmpty()) {
            if (scanIdListsBuilder_.isEmpty()) {
              scanIdListsBuilder_.dispose();
              scanIdListsBuilder_ = null;
              scanIdLists_ = other.scanIdLists_;
              bitField0_ = (bitField0_ & ~0x00000002);
              scanIdListsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getScanIdListsFieldBuilder() : null;
            } else {
              scanIdListsBuilder_.addAllMessages(other.scanIdLists_);
            }
          }
        }
        if (chromatogramsBuilder_ == null) {
          if (!other.chromatograms_.isEmpty()) {
            if (chromatograms_.isEmpty()) {
              chromatograms_ = other.chromatograms_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureChromatogramsIsMutable();
              chromatograms_.addAll(other.chromatograms_);
            }
            onChanged();
          }
        } else {
          if (!other.chromatograms_.isEmpty()) {
            if (chromatogramsBuilder_.isEmpty()) {
              chromatogramsBuilder_.dispose();
              chromatogramsBuilder_ = null;
              chromatograms_ = other.chromatograms_;
              bitField0_ = (bitField0_ & ~0x00000004);
              chromatogramsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChromatogramsFieldBuilder() : null;
            } else {
              chromatogramsBuilder_.addAllMessages(other.chromatograms_);
            }
          }
        }
        if (other.getInterpolatedStartTime() != 0D) {
          setInterpolatedStartTime(other.getInterpolatedStartTime());
        }
        if (other.getInterpolatedEndTime() != 0D) {
          setInterpolatedEndTime(other.getInterpolatedEndTime());
        }
        if (other.getInterpolatedNumPoints() != 0) {
          setInterpolatedNumPoints(other.getInterpolatedNumPoints());
        }
        if (other.getInterpolatedDelta() != 0D) {
          setInterpolatedDelta(other.getInterpolatedDelta());
        }
        if (other.getInferZeroes() != false) {
          setInferZeroes(other.getInferZeroes());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList> timeLists_ =
        java.util.Collections.emptyList();
      private void ensureTimeListsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          timeLists_ = new java.util.ArrayList<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList>(timeLists_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder> timeListsBuilder_;

      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList> getTimeListsList() {
        if (timeListsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(timeLists_);
        } else {
          return timeListsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public int getTimeListsCount() {
        if (timeListsBuilder_ == null) {
          return timeLists_.size();
        } else {
          return timeListsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList getTimeLists(int index) {
        if (timeListsBuilder_ == null) {
          return timeLists_.get(index);
        } else {
          return timeListsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder setTimeLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList value) {
        if (timeListsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeListsIsMutable();
          timeLists_.set(index, value);
          onChanged();
        } else {
          timeListsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder setTimeLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder builderForValue) {
        if (timeListsBuilder_ == null) {
          ensureTimeListsIsMutable();
          timeLists_.set(index, builderForValue.build());
          onChanged();
        } else {
          timeListsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder addTimeLists(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList value) {
        if (timeListsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeListsIsMutable();
          timeLists_.add(value);
          onChanged();
        } else {
          timeListsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder addTimeLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList value) {
        if (timeListsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTimeListsIsMutable();
          timeLists_.add(index, value);
          onChanged();
        } else {
          timeListsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder addTimeLists(
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder builderForValue) {
        if (timeListsBuilder_ == null) {
          ensureTimeListsIsMutable();
          timeLists_.add(builderForValue.build());
          onChanged();
        } else {
          timeListsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder addTimeLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder builderForValue) {
        if (timeListsBuilder_ == null) {
          ensureTimeListsIsMutable();
          timeLists_.add(index, builderForValue.build());
          onChanged();
        } else {
          timeListsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder addAllTimeLists(
          java.lang.Iterable<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList> values) {
        if (timeListsBuilder_ == null) {
          ensureTimeListsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, timeLists_);
          onChanged();
        } else {
          timeListsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder clearTimeLists() {
        if (timeListsBuilder_ == null) {
          timeLists_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          timeListsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public Builder removeTimeLists(int index) {
        if (timeListsBuilder_ == null) {
          ensureTimeListsIsMutable();
          timeLists_.remove(index);
          onChanged();
        } else {
          timeListsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder getTimeListsBuilder(
          int index) {
        return getTimeListsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder getTimeListsOrBuilder(
          int index) {
        if (timeListsBuilder_ == null) {
          return timeLists_.get(index);  } else {
          return timeListsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder> 
           getTimeListsOrBuilderList() {
        if (timeListsBuilder_ != null) {
          return timeListsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(timeLists_);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder addTimeListsBuilder() {
        return getTimeListsFieldBuilder().addBuilder(
            org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.getDefaultInstance());
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder addTimeListsBuilder(
          int index) {
        return getTimeListsFieldBuilder().addBuilder(
            index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.getDefaultInstance());
      }
      /**
       * <code>repeated .ChromatogramGroupData.TimeList timeLists = 1;</code>
       */
      public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder> 
           getTimeListsBuilderList() {
        return getTimeListsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder> 
          getTimeListsFieldBuilder() {
        if (timeListsBuilder_ == null) {
          timeListsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeList.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.TimeListOrBuilder>(
                  timeLists_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          timeLists_ = null;
        }
        return timeListsBuilder_;
      }

      private java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList> scanIdLists_ =
        java.util.Collections.emptyList();
      private void ensureScanIdListsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          scanIdLists_ = new java.util.ArrayList<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList>(scanIdLists_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder> scanIdListsBuilder_;

      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList> getScanIdListsList() {
        if (scanIdListsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(scanIdLists_);
        } else {
          return scanIdListsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public int getScanIdListsCount() {
        if (scanIdListsBuilder_ == null) {
          return scanIdLists_.size();
        } else {
          return scanIdListsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList getScanIdLists(int index) {
        if (scanIdListsBuilder_ == null) {
          return scanIdLists_.get(index);
        } else {
          return scanIdListsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder setScanIdLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList value) {
        if (scanIdListsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScanIdListsIsMutable();
          scanIdLists_.set(index, value);
          onChanged();
        } else {
          scanIdListsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder setScanIdLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder builderForValue) {
        if (scanIdListsBuilder_ == null) {
          ensureScanIdListsIsMutable();
          scanIdLists_.set(index, builderForValue.build());
          onChanged();
        } else {
          scanIdListsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder addScanIdLists(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList value) {
        if (scanIdListsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScanIdListsIsMutable();
          scanIdLists_.add(value);
          onChanged();
        } else {
          scanIdListsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder addScanIdLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList value) {
        if (scanIdListsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureScanIdListsIsMutable();
          scanIdLists_.add(index, value);
          onChanged();
        } else {
          scanIdListsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder addScanIdLists(
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder builderForValue) {
        if (scanIdListsBuilder_ == null) {
          ensureScanIdListsIsMutable();
          scanIdLists_.add(builderForValue.build());
          onChanged();
        } else {
          scanIdListsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder addScanIdLists(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder builderForValue) {
        if (scanIdListsBuilder_ == null) {
          ensureScanIdListsIsMutable();
          scanIdLists_.add(index, builderForValue.build());
          onChanged();
        } else {
          scanIdListsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder addAllScanIdLists(
          java.lang.Iterable<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList> values) {
        if (scanIdListsBuilder_ == null) {
          ensureScanIdListsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, scanIdLists_);
          onChanged();
        } else {
          scanIdListsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder clearScanIdLists() {
        if (scanIdListsBuilder_ == null) {
          scanIdLists_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          scanIdListsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public Builder removeScanIdLists(int index) {
        if (scanIdListsBuilder_ == null) {
          ensureScanIdListsIsMutable();
          scanIdLists_.remove(index);
          onChanged();
        } else {
          scanIdListsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder getScanIdListsBuilder(
          int index) {
        return getScanIdListsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder getScanIdListsOrBuilder(
          int index) {
        if (scanIdListsBuilder_ == null) {
          return scanIdLists_.get(index);  } else {
          return scanIdListsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder> 
           getScanIdListsOrBuilderList() {
        if (scanIdListsBuilder_ != null) {
          return scanIdListsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(scanIdLists_);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder addScanIdListsBuilder() {
        return getScanIdListsFieldBuilder().addBuilder(
            org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.getDefaultInstance());
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder addScanIdListsBuilder(
          int index) {
        return getScanIdListsFieldBuilder().addBuilder(
            index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.getDefaultInstance());
      }
      /**
       * <code>repeated .ChromatogramGroupData.ScanIdList scanIdLists = 2;</code>
       */
      public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder> 
           getScanIdListsBuilderList() {
        return getScanIdListsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder> 
          getScanIdListsFieldBuilder() {
        if (scanIdListsBuilder_ == null) {
          scanIdListsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdList.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ScanIdListOrBuilder>(
                  scanIdLists_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          scanIdLists_ = null;
        }
        return scanIdListsBuilder_;
      }

      private java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram> chromatograms_ =
        java.util.Collections.emptyList();
      private void ensureChromatogramsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          chromatograms_ = new java.util.ArrayList<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram>(chromatograms_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder> chromatogramsBuilder_;

      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram> getChromatogramsList() {
        if (chromatogramsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(chromatograms_);
        } else {
          return chromatogramsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public int getChromatogramsCount() {
        if (chromatogramsBuilder_ == null) {
          return chromatograms_.size();
        } else {
          return chromatogramsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram getChromatograms(int index) {
        if (chromatogramsBuilder_ == null) {
          return chromatograms_.get(index);
        } else {
          return chromatogramsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder setChromatograms(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram value) {
        if (chromatogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChromatogramsIsMutable();
          chromatograms_.set(index, value);
          onChanged();
        } else {
          chromatogramsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder setChromatograms(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder builderForValue) {
        if (chromatogramsBuilder_ == null) {
          ensureChromatogramsIsMutable();
          chromatograms_.set(index, builderForValue.build());
          onChanged();
        } else {
          chromatogramsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder addChromatograms(org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram value) {
        if (chromatogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChromatogramsIsMutable();
          chromatograms_.add(value);
          onChanged();
        } else {
          chromatogramsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder addChromatograms(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram value) {
        if (chromatogramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChromatogramsIsMutable();
          chromatograms_.add(index, value);
          onChanged();
        } else {
          chromatogramsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder addChromatograms(
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder builderForValue) {
        if (chromatogramsBuilder_ == null) {
          ensureChromatogramsIsMutable();
          chromatograms_.add(builderForValue.build());
          onChanged();
        } else {
          chromatogramsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder addChromatograms(
          int index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder builderForValue) {
        if (chromatogramsBuilder_ == null) {
          ensureChromatogramsIsMutable();
          chromatograms_.add(index, builderForValue.build());
          onChanged();
        } else {
          chromatogramsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder addAllChromatograms(
          java.lang.Iterable<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram> values) {
        if (chromatogramsBuilder_ == null) {
          ensureChromatogramsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, chromatograms_);
          onChanged();
        } else {
          chromatogramsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder clearChromatograms() {
        if (chromatogramsBuilder_ == null) {
          chromatograms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          chromatogramsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public Builder removeChromatograms(int index) {
        if (chromatogramsBuilder_ == null) {
          ensureChromatogramsIsMutable();
          chromatograms_.remove(index);
          onChanged();
        } else {
          chromatogramsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder getChromatogramsBuilder(
          int index) {
        return getChromatogramsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder getChromatogramsOrBuilder(
          int index) {
        if (chromatogramsBuilder_ == null) {
          return chromatograms_.get(index);  } else {
          return chromatogramsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public java.util.List<? extends org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder> 
           getChromatogramsOrBuilderList() {
        if (chromatogramsBuilder_ != null) {
          return chromatogramsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(chromatograms_);
        }
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder addChromatogramsBuilder() {
        return getChromatogramsFieldBuilder().addBuilder(
            org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.getDefaultInstance());
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder addChromatogramsBuilder(
          int index) {
        return getChromatogramsFieldBuilder().addBuilder(
            index, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.getDefaultInstance());
      }
      /**
       * <code>repeated .ChromatogramGroupData.Chromatogram chromatograms = 3;</code>
       */
      public java.util.List<org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder> 
           getChromatogramsBuilderList() {
        return getChromatogramsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder> 
          getChromatogramsFieldBuilder() {
        if (chromatogramsBuilder_ == null) {
          chromatogramsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.Chromatogram.Builder, org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData.ChromatogramOrBuilder>(
                  chromatograms_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          chromatograms_ = null;
        }
        return chromatogramsBuilder_;
      }

      private double interpolatedStartTime_ ;
      /**
       * <code>optional double interpolatedStartTime = 4;</code>
       */
      public double getInterpolatedStartTime() {
        return interpolatedStartTime_;
      }
      /**
       * <code>optional double interpolatedStartTime = 4;</code>
       */
      public Builder setInterpolatedStartTime(double value) {
        
        interpolatedStartTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double interpolatedStartTime = 4;</code>
       */
      public Builder clearInterpolatedStartTime() {
        
        interpolatedStartTime_ = 0D;
        onChanged();
        return this;
      }

      private double interpolatedEndTime_ ;
      /**
       * <code>optional double interpolatedEndTime = 5;</code>
       */
      public double getInterpolatedEndTime() {
        return interpolatedEndTime_;
      }
      /**
       * <code>optional double interpolatedEndTime = 5;</code>
       */
      public Builder setInterpolatedEndTime(double value) {
        
        interpolatedEndTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double interpolatedEndTime = 5;</code>
       */
      public Builder clearInterpolatedEndTime() {
        
        interpolatedEndTime_ = 0D;
        onChanged();
        return this;
      }

      private int interpolatedNumPoints_ ;
      /**
       * <code>optional int32 interpolatedNumPoints = 6;</code>
       */
      public int getInterpolatedNumPoints() {
        return interpolatedNumPoints_;
      }
      /**
       * <code>optional int32 interpolatedNumPoints = 6;</code>
       */
      public Builder setInterpolatedNumPoints(int value) {
        
        interpolatedNumPoints_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 interpolatedNumPoints = 6;</code>
       */
      public Builder clearInterpolatedNumPoints() {
        
        interpolatedNumPoints_ = 0;
        onChanged();
        return this;
      }

      private double interpolatedDelta_ ;
      /**
       * <code>optional double interpolatedDelta = 7;</code>
       */
      public double getInterpolatedDelta() {
        return interpolatedDelta_;
      }
      /**
       * <code>optional double interpolatedDelta = 7;</code>
       */
      public Builder setInterpolatedDelta(double value) {
        
        interpolatedDelta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double interpolatedDelta = 7;</code>
       */
      public Builder clearInterpolatedDelta() {
        
        interpolatedDelta_ = 0D;
        onChanged();
        return this;
      }

      private boolean inferZeroes_ ;
      /**
       * <code>optional bool inferZeroes = 9;</code>
       */
      public boolean getInferZeroes() {
        return inferZeroes_;
      }
      /**
       * <code>optional bool inferZeroes = 9;</code>
       */
      public Builder setInferZeroes(boolean value) {
        
        inferZeroes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool inferZeroes = 9;</code>
       */
      public Builder clearInferZeroes() {
        
        inferZeroes_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:ChromatogramGroupData)
    }

    // @@protoc_insertion_point(class_scope:ChromatogramGroupData)
    private static final org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData();
    }

    public static org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChromatogramGroupData>
        PARSER = new com.google.protobuf.AbstractParser<ChromatogramGroupData>() {
      public ChromatogramGroupData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ChromatogramGroupData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ChromatogramGroupData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChromatogramGroupData> getParserForType() {
      return PARSER;
    }

    public org.labkey.targetedms.parser.proto.ChromatogramGroupDataOuterClass.ChromatogramGroupData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ChromatogramGroupData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ChromatogramGroupData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ChromatogramGroupData_TimeList_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ChromatogramGroupData_TimeList_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ChromatogramGroupData_ScanIdList_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ChromatogramGroupData_ScanIdList_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ChromatogramGroupData_Chromatogram_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ChromatogramGroupData_Chromatogram_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033ChromatogramGroupData.proto\"\220\004\n\025Chroma" +
      "togramGroupData\0222\n\ttimeLists\030\001 \003(\0132\037.Chr" +
      "omatogramGroupData.TimeList\0226\n\013scanIdLis" +
      "ts\030\002 \003(\0132!.ChromatogramGroupData.ScanIdL" +
      "ist\022:\n\rchromatograms\030\003 \003(\0132#.Chromatogra" +
      "mGroupData.Chromatogram\022\035\n\025interpolatedS" +
      "tartTime\030\004 \001(\001\022\033\n\023interpolatedEndTime\030\005 " +
      "\001(\001\022\035\n\025interpolatedNumPoints\030\006 \001(\005\022\031\n\021in" +
      "terpolatedDelta\030\007 \001(\001\022\023\n\013inferZeroes\030\t \001" +
      "(\010\032\031\n\010TimeList\022\r\n\005times\030\001 \003(\002\032\035\n\nScanIdL",
      "ist\022\017\n\007scanIds\030\002 \003(\005\032\211\001\n\014Chromatogram\022\025\n" +
      "\rtimeListIndex\030\001 \001(\005\022\023\n\013intensities\030\002 \003(" +
      "\002\022\034\n\024massErrorsDeprecated\030\003 \003(\002\022\026\n\016massE" +
      "rrors100X\030\005 \003(\021\022\027\n\017scanIdListIndex\030\004 \001(\005" +
      "BJ\n\"org.labkey.targetedms.parser.proto\252\002" +
      "#pwiz.Skyline.Model.Results.ProtoBufb\006pr" +
      "oto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_ChromatogramGroupData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ChromatogramGroupData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ChromatogramGroupData_descriptor,
        new java.lang.String[] { "TimeLists", "ScanIdLists", "Chromatograms", "InterpolatedStartTime", "InterpolatedEndTime", "InterpolatedNumPoints", "InterpolatedDelta", "InferZeroes", });
    internal_static_ChromatogramGroupData_TimeList_descriptor =
      internal_static_ChromatogramGroupData_descriptor.getNestedTypes().get(0);
    internal_static_ChromatogramGroupData_TimeList_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ChromatogramGroupData_TimeList_descriptor,
        new java.lang.String[] { "Times", });
    internal_static_ChromatogramGroupData_ScanIdList_descriptor =
      internal_static_ChromatogramGroupData_descriptor.getNestedTypes().get(1);
    internal_static_ChromatogramGroupData_ScanIdList_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ChromatogramGroupData_ScanIdList_descriptor,
        new java.lang.String[] { "ScanIds", });
    internal_static_ChromatogramGroupData_Chromatogram_descriptor =
      internal_static_ChromatogramGroupData_descriptor.getNestedTypes().get(2);
    internal_static_ChromatogramGroupData_Chromatogram_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ChromatogramGroupData_Chromatogram_descriptor,
        new java.lang.String[] { "TimeListIndex", "Intensities", "MassErrorsDeprecated", "MassErrors100X", "ScanIdListIndex", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
